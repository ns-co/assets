// NSSL Pong Game 
// by defcon-x <defcon-x@ns-co.net> 16.03.03 
// homepage: http://www.team-mirage.net/defconsvault
// description: 
//
// this is the first game built with nssl.
// 
// keys:
//
//	p stop script / restart game
//	o move up
//	l move down
//
// note:
//
//	
//	create an ai :D
//
//	don't let it touch the blue field behind your red base.
//	speed increases on every rebounce
//	have fun :p
//	

// UPDATE 04.04.03 : 
//	using ns:co +alias function now.
//	bind KEY +alias <function_to_execute_when_button_is_pushed> <function_to_execute_when_button_is_released>
// 	very smooth controls added :)

//
// ---DO NOT Modify the following code
//
set var_pong_scriptver	"seals-1.93"
set script_name 	"^1NSSL-Pong^7 v1.2" 
set script_dscr 	"^7stop the game."
set script_filename 	"^1pong.cfg^7"
set author_name 	"^1defcon-x^7"
set author_email 	"^4defcon-x@ns-co.net^7"
set pong_score 		"0"
set pong_speed_pos 	"3"
set pong_speed_neg 	"-3"
set pong_vel_x 		"0"
set pong_vel_y 		"0"
set pong_org_x 		"250"
set pong_org_y 		"250"
set pong_speed_mod 	"0"
set pong_speed_factor 	"0.05"
set pong_y 		"250" 
set pong_gameover 	"1"
set pong_size		"50"
set pong_step		"5" 
// strings for 2d drawing
set pong_string_welcome "^1Welcome!^7 Press '^1P^7' to start the game."
set pong_string_about "NS:CO ^1Pong^7 v1.2 - by ^4defconX^7 (^1defconX@team-mirage.net^7)"
set pong_string_help "Push '^1O^7' to move up and '^1L^7' to move down. Don't let the ball hit the blue bar."
set pong_string_over "^1Game Over^7 - Press '^1P^7' to quit, press it again to ^1restart^7."
set pong_string_played "^3Just played ^1NSSL Pong^7! ^3My score was:^1"

//
// ---Modify the following code
//
// make it easier and cooler to change key 
// bind it to whatever you want
//
set var_pong_key		"p"

//
// ---DO NOT Modify the following code
//

// tell'em hello
cs addstring gameover { $pong_string_welcome } 35 415 0.3 4;

// if it's already active, kill it.
toggle pong_active

set func_addstr1 "cs addstring str { $pong_string_help } 35 400 0.25 4";
set func_addstr2 "cs addstring str { $pong_string_about } 35 80 0.3 4";
 
cs if pong_active == 0 { cs delgroup back # cs delgroup pong # cs delgroup str # cs delgroup gameover # cs delgroup score # cs delgroup ball } else { vstr func_addstr1 # vstr func_addstr2 };
 
//
// render background
//
set func_refresh_back "cs delgroup back; vstr func_create_back"
 
set func_create_back   "cs addgfx back 100 100 250 250 0 0 0 0.8;vstr func_create_back_2"
set func_create_back_2 "cs addgfx back 100 100 10 250 0.5 0.5 1 1.0;vstr func_create_back_3"
set func_create_back_3 "cs addgfx back 340 100 10 250 1 1 1 1.0;vstr func_create_back_4"
set func_create_back_4 "cs addgfx back 100 100 250 10 1 1 1 1.0;vstr func_create_back_5"
set func_create_back_5 "cs addgfx back 100 350 250 10 1 1 1 1.0"

// render pong base
set func_refresh_pong "cs delgroup pong; vstr func_draw_pong"
set func_draw_pong "cs addgfx pong 120 $pong_y 10 $pong_size 1.0 0.1 0.1 1"

// render score & handle reset 
set func_refresh_score "cs delgroup score; cs addstring score { Score:^1 (int)$pong_score } 400 200 0.25 4 1 1 1 1;cs addstring score { HighScore:^1 (int)$pong_high_score } 400 215 0.25 4 1 1 1 1;cs if pong_score > pong_high_score { seta pong_high_score $pong_score }";
set func_add_score "cs modify pong_score +1"
set func_reset_score "set pong_score 0"
set func_reset_ball "set pong_org_x 250;set pong_org_y 250;set pong_vel_x 0;set pong_vel_y 0"
set func_restart_ball "set pong_org_x 250;set pong_org_y 250;cs if *rand1 < 0.5 { set pong_vel_x 3 } else { set pong_vel_x -3 };cs if *rand1 < 0.5 { set pong_vel_y 3 } else { set pong_vel_y -3 }"
// handle gameover
set func_gameover " vstr func_reset_ball; set pong_gameover 1; vstr func_add_gameover;set pong_speed_mod 0"
set func_add_gameover "cs addstring gameover { $pong_string_over } 35 415 0.3 4";
set func_restart_gameover "cs if pong_gameover == 1 { vstr func_reset_score # set pong_gameover 0 # cs delgroup gameover # vstr func_restart_ball }";
 
// update the ball depending on his velocity
set func_pong_update "cs modify pong_org_x $pong_vel_x;cs modify pong_org_y $pong_vel_y;cs if pong_gameover == 0 { vstr func_pong_draw }";
// render the ball 
set func_pong_draw "cs delgroup ball; cs addgfx ball $pong_org_x $pong_org_y 10 10 1 1 1 0.8 gfx/misc/flare1.tga"

// play sound and increase speed on bounce
set func_playbonce "play sound/misc/refuse.wav"
set func_add_speedmod2 "cs modify pong_speed_mod $pong_speed_factor;cs modify pong_vel_x -$pong_speed_mod; vstr func_playbonce "
set func_add_speedmod3 "cs modify pong_speed_mod $pong_speed_factor;cs modify pong_vel_y -$pong_speed_mod; vstr func_playbonce "
set func_add_speedmod4 "cs modify pong_speed_mod $pong_speed_factor;cs modify pong_vel_y $pong_speed_mod; vstr func_playbonce "

//
//  collision detection
// 
// collision with base
set func_pong_ball "cs if pong_org_x < 130 && ( pong_org_y >= pong_base_up && pong_org_y <= pong_base_dn ) { set pong_org_x 130 # set pong_vel_x $pong_speed_pos }";

set func_pong_base "cs vset pong_base_dn { $pong_y }; cs modify pong_base_dn +$pong_size; vstr func_pong_base2";
set func_pong_base2 "cs vset pong_base_up { $pong_y }; vstr func_pong_ball";

// back side = death :p
set func_pong_pos "cs if pong_org_x < 110 && pong_gameover == 0 { set pong_vel_x 0 # cs modify pong_vel_x *rand2 # cs modify pong_vel_x $pong_speed_pos # vstr func_gameover }; vstr func_pong_pos2"

// just rebounce here
set func_pong_pos2 "cs if pong_org_x > 330 && pong_gameover == 0 { set pong_org_x 330 # set pong_vel_x 0 # vstr func_add_speedmod2 # cs modify pong_vel_x $pong_speed_neg # vstr func_add_score }; vstr func_pong_pos3"
set func_pong_pos3 "cs if pong_org_y > 335 && pong_gameover == 0 { set pong_org_y 335 # set pong_vel_y 0 # vstr func_add_speedmod3 # cs modify pong_vel_y $pong_speed_neg # vstr func_add_score }; vstr func_pong_pos4"
set func_pong_pos4 "cs if pong_org_y < 110 && pong_gameover == 0 { set pong_org_y 110 # set pong_vel_y 0 # vstr func_add_speedmod4 # cs modify pong_vel_y $pong_speed_pos # vstr func_add_score }"

//
//  pong controls
//
set max_up "300"
set max_dn "110"
set func_pong_move_dn "cs if pong_y < max_up { cs modify pong_y +$pong_step } else { set pong_y $max_up }";
set func_pong_move_up "cs if pong_y > max_dn { cs modify pong_y -$pong_step } else { set pong_y $max_dn }";

//
// this piece of code is very useful if you want to write your own games
// it shows you how to do proper input scanning in nssl for games or similar things (menus)
//
set up_toggle 0
set dn_toggle 0

set func_pong_move_up_start "cs if up_toggle == 0 { set up_toggle 1 }"
set func_pong_move_up_end "cs if up_toggle == 1 { set up_toggle 0 }"

set func_pong_move_dn_start "cs if dn_toggle == 0 { set dn_toggle 1 }"
set func_pong_move_dn_end "cs if dn_toggle == 1 { set dn_toggle 0 }"

set func_check_move "cs if up_toggle == 1 { vstr func_pong_move_up } elseif dn_toggle == 1 { vstr func_pong_move_dn }";

bind o "+alias func_pong_move_up_start func_pong_move_up_end"
bind l "+alias func_pong_move_dn_start func_pong_move_dn_end"

//
// main process
//
cs while pong_active == 1 { vstr func_refresh_back # vstr func_refresh_pong # vstr func_pong_pos # vstr func_pong_base # vstr func_pong_update # vstr func_refresh_score # vstr func_check_move } 10 -1

//
// entry point for this script
set pong_entry "cs if ( pong_gameover == 1 && pong_score <= 0 ) then { vstr func_restart_gameover } else { cs delgroup back # cs delgroup pong # cs delgroup str # cs delgroup gameover # cs delgroup score # cs delgroup ball # set pong_active 0 # cs if pong_score > 0 { say $pong_string_played (int)$pong_score } # set pong_score 0 # bind $var_pong_key exec nssl/pong.cfg }" ;

//
// init it
cs if var_pong_version != 0.5 then { set var_pong_version 0.5 };
cs exec { bind $var_pong_key "vstr pong_entry" }
// i'm using echo so it's only visible in the console and not on screen
set func_pong_hello "cs exec { echo ^1 $script_name ^7by $author_name ( $author_email ) $var_pong_version }; cs exec { echo ^7Press '^1 $var_pong_key ^7' to $script_dscr }";

//
// check for wrong version
cs if gameversion != $var_pong_scriptver then { nsecho NSSL: ^1INVALID GAMEVERSION FOR SCRIPT $script_filename (^7SCRIPT DISABLED^1) # unbind $var_pong_key } else { vstr func_pong_hello }
